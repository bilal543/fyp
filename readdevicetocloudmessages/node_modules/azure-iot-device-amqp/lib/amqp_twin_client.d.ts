/// <reference types="node" />
import { EventEmitter } from 'events';
import { AuthenticationProvider } from 'azure-iot-common';
/**
 * @private
 * @class        module:azure-iot-device-amqp.AmqpTwinClient
 * @classdesc    Acts as a receiver for device-twin traffic
 *
 * @param {Object} config   configuration object
 * @fires AmqpTwinClient#subscribed   an response or post event has been set up for listening.
 * @fires AmqpTwinClient#error    an error has occurred
 * @fires AmqpTwinClient#response   a response message has been received from the service
 * @fires AmqpTwinClient#post a post message has been received from the service
 * @throws {ReferenceError} If client parameter is falsy.
 *
 */
export declare class AmqpTwinClient extends EventEmitter {
    static errorEvent: string;
    static responseEvent: string;
    static postEvent: string;
    static subscribedEvent: string;
    private _client;
    private _authenticationProvider;
    private _boundMessageHandler;
    private _endpoint;
    private _upstreamAmqpLink;
    private _downstreamAmqpLink;
    private _fsm;
    private _internalOperations;
    private _eventQueue;
    private _eventQueueError;
    constructor(authenticationProvider: AuthenticationProvider, client: any);
    /**
     * @method          module:azure-iot-device-amqp.Amqp#sendTwinRequest
     * @description     Send a device-twin specific message to the IoT Hub instance
     *
     * @param {String}        method    name of the method to invoke ('PUSH', 'PATCH', etc)
     * @param {String}        resource  name of the resource to act on (e.g. '/properties/reported/') with beginning and ending slashes
     * @param {Object}        properties  object containing name value pairs for request properties (e.g. { 'rid' : 10, 'index' : 17 })
     * @param {String}        body  body of request
     * @param {Function}      done  the callback to be invoked when this function completes.
     *
     * @throws {ReferenceError}   One of the required parameters is falsy
     * @throws {ArgumentError}  One of the parameters is an incorrect type
     */
    sendTwinRequest(method: string, resource: string, properties: {
        [key: string]: string;
    }, body: any, done?: (err?: Error, result?: any) => void): void;
    attach(callback: (err: Error) => void): void;
    detach(callback: (err: Error) => void): void;
    private _generateTwinLinkProperties(correlationId);
    private _handleNewListener(eventName);
    private _handleRemoveListener(eventName);
    private _onAmqpMessage(message);
    private _onResponseMessage(message);
    private _onDesiredPropertyDelta(message);
    private _onAmqpDetached(detachObject);
    private _handleError(err);
    private _safeCallback(callback, error?, result?);
    private _appendEventQueue();
    private _handleHeadOfEventQueue();
    private _AppendOrHandleEvent();
    private _isString(obj);
    private _isNumber(obj);
    private _isBoolean(obj);
    private _rundown_sendTwinRequest(method, resource, properties, body, done?);
    private _sendTwinRequest(method, resource, properties, body, done?);
}
